# Gocashless System Architecture Overview

The Gocashless system will be built on a robust, scalable, and secure microservice architecture using Spring Boot for the backend, and modern JavaScript frameworks for the frontends, ensuring a seamless experience for passengers, conductors, and bus companies.

## 1. High-Level Architecture

At its core, the system will comprise:

- **Backend Microservices (Spring Boot):** Handling business logic, data storage, API integrations (Mobile Money), and notifications.
- **Mobile Applications (React Native):** Two distinct apps for Passengers and Conductors, providing intuitive interfaces for payments and transactions.
- **Web Application (Next.js):** A dashboard for Bus Companies to manage conductors and view aggregated transaction data.
- **Database:** A persistent data store for all system information.

```mermaid
graph TD
    subgraph Frontend
        PassengerApp(Passenger App - React Native)
        ConductorApp(Conductor App - React Native)
        BusCompanyWebApp(Bus Company Web App - Next.js)
    end

    subgraph Backend Microservices (Spring Boot)
        UM(User Management Service)
        RFM(Route & Fare Management Service)
        QRG(QR Code Generation Service)
        PPS(Payment Processing Service)
        THS(Transaction History Service)
        NOS(Notification Service)
    end

    DB(Database - PostgreSQL/MongoDB)
    AIRTEL_MOMO(Airtel MoMo API)

    PassengerApp -- Scans QR, Initiates Payment --> QRG
    PassengerApp -- Sends Payment Request --> PPS
    ConductorApp -- Selects Route/Stop --> RFM
    ConductorApp -- Generates QR Code --> QRG
    ConductorApp -- Receives Payment Confirmation --> NOS
    BusCompanyWebApp -- Manages Conductors, Views Reports --> UM & THS

    QRG -- Generates QR Data --> PPS
    PPS -- Interacts with --> AIRTEL_MOMO
    AIRTEL_MOMO -- Sends Payment Status --> PPS
    PPS -- Records Transactions --> THS
    THS -- Stores Data In --> DB
    UM -- Stores User Data In --> DB
    RFM -- Stores Route/Fare Data In --> DB
    NOS -- Sends Notifications To --> PassengerApp & ConductorApp

## 2. Key Components and Their Interactions

### 2.1 Backend Microservices (Spring Boot)

Each microservice will be an independent Spring Boot application, communicating via REST APIs.

#### User Management Service (UMS)

- **Functionality:** Handles registration, login, and profile management for Passengers, Conductors, and Bus Companies. Manages user roles and permissions.  
- **Data:** User credentials, profiles (name, contact, role), associated bus company IDs.  
- **Interactions:** Authenticates requests from all frontend applications.  

#### Route & Fare Management Service (RFMS)

- **Functionality:** Stores and manages bus routes, bus stops, and the corresponding fare matrix (e.g., A-B=K15, A-C=K20).  
- **Data:** Route IDs, stop names, stop coordinates, fare prices between stops.  
- **Interactions:** Conductor App queries this service to get fare information for QR code generation.  

#### QR Code Generation Service (QRGS)

- **Functionality:** Generates QR codes containing encrypted payment details (e.g., conductor ID, selected route/fare ID, transaction ID placeholder).  
- **Data:** Takes fare information from RFMS and conductor details from UMS to embed in the QR code.  
- **Interactions:** Conductor App requests a QR code from this service. Passenger App scans the QR code, which contains data that can be sent to the Payment Processing Service.  

#### Payment Processing Service (PPS)

- **Functionality:** Core of the payment flow. It initiates payment requests to the Airtel MoMo API, handles callbacks from MoMo (payment success/failure), and updates transaction status.  
- **Data:** Payment requests, MoMo transaction IDs, payment status.  
- **Interactions:**  
  - Receives payment initiation requests (containing scanned QR data) from the Passenger App.  
  - Communicates with the Airtel MoMo API.  
  - Notifies the Notification Service upon payment completion.  
  - Updates the Transaction History Service.  

#### Transaction History Service (THS)

- **Functionality:** Stores all payment transactions, including passenger ID, conductor ID, bus company ID, route, fare, timestamp, and status. Provides APIs for retrieving transaction history.  
- **Data:** Comprehensive transaction records.  
- **Interactions:**  
  - Receives transaction updates from the Payment Processing Service.  
  - Passenger App, Conductor App, and Bus Company Web App query this service for transaction history.  

#### Notification Service (NOS)

- **Functionality:** Sends real-time notifications to relevant parties (e.g., payment success to conductor and passenger, payment failure). Can use WebSockets or push notifications (Firebase Cloud Messaging).  
- **Data:** Notification messages, recipient IDs.  
- **Interactions:** Triggered by the Payment Processing Service upon payment status change.  

---

### 2.2 Frontend Applications

#### Conductor App (React Native)

**User Flow:**

1. Conductor logs in (via UMS).  
2. Selects the destination bus stop from a list (data from RFMS).  
3. Requests a QR code from QRGS based on the selected fare and conductor ID.  
4. Displays the generated QR code on screen.  
5. Receives a real-time notification upon successful payment (via NOS).  
6. Views transaction history (from THS).  

**Key Features:** Offline capabilities (for displaying QR codes without immediate internet), real-time updates.  

#### Passenger App (React Native)

**User Flow:**

1. Passenger logs in (via UMS).  
2. Opens the QR scanner.  
3. Scans the QR code displayed on the conductor's phone.  
4. Parses the QR data and sends a payment initiation request to PPS.  
5. Receives a push notification from Airtel MoMo to enter their PIN and confirm payment (handled by MoMo, not the app).  
6. Receives a real-time notification upon confirmation (via NOS).  
7. Views transaction history (from THS).  

**Key Features:** Fast QR scanning, clear payment status display.  

#### Bus Company Web App (Next.js)

**User Flow:**

1. Administrator logs in (via UMS).  
2. Registers and manages conductors (via UMS).  
3. Views a dashboard with aggregated transaction data (from THS).  
4. Generates reports (e.g., daily revenue per route/conductor).  

**Key Features:** Secure login, data visualization, reporting tools.  

---

## 3. QR Code and Mobile Money Flow (Detailed)

1. **Conductor Initiates:** Conductor selects the destination (e.g., "Bus Stop B") on their app.  
2. **Fare Lookup:** Conductor App queries RFMS to get the fare.  
3. **QR Code Generation Request:** Conductor App sends a request to QRGS with conductor ID, fare amount, and a unique transaction ID.  
4. **QR Code Display:** QRGS generates a QR code with encrypted payload (e.g., `{"conductorId": "...", "fareAmount": 20, "transactionRef": "..."}`). Displayed on conductor's screen.  
5. **Passenger Scans:** Passenger scans the QR code using their app.  
6. **Payment Initiation:** Passenger App sends QR payload to PPS.  
7. **MoMo API Call:** PPS calls Airtel MoMo to initiate payment from passengerâ€™s wallet to Gocashless merchant account.  
8. **Passenger PIN Confirmation:** Airtel MoMo prompts passenger to enter PIN (outside the app).  
9. **MoMo Callback:** Airtel MoMo sends payment status (success/failure) to PPS via webhook.  
10. **Transaction Update:** PPS updates THS and notifies NOS.  
11. **Real-time Notifications:** NOS notifies both Conductor App ("Payment Received: K20") and Passenger App ("Payment Successful: K20").  

---

## 4. Security Considerations

- **Data Encryption:** Encrypt all sensitive data (QR payloads, API keys, credentials) in transit (HTTPS) and at rest.  
- **Authentication & Authorization:** Use robust token-based authentication (JWT). Enforce role-based access control.  
- **QR Code Security:** Encrypt and sign QR data to prevent tampering. Do not store sensitive plain data in QR codes.  
- **API Security:** Use Airtel MoMo recommended authentication (API keys, OAuth). Implement rate limiting and input validation.  
- **Input Validation:** Validate inputs on frontend and backend to prevent injection attacks.  
- **Error Handling & Logging:** Implement proper error handling and logging for monitoring and quick issue resolution.  

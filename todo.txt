Gocashless Project To-Do List

**Backend Development**

1.  **Set Up Service Discovery (Eureka Server):**
    *   Create a new Spring Boot application for the Eureka server.
    *   This is crucial for microservice communication.

2.  **`payment-service` Development Summary:**

    *   **[x] Scaffolding the Service:**
        *   **Description:** Created a new Spring Boot project for the `payment-processing-service` with a standard Maven layout. This provides the foundational structure for the service.

    *   **[x] Dependency Management:**
        *   **Description:** Added essential dependencies to the `pom.xml` file, including Spring Web for creating web endpoints, Spring Data JPA for database interaction, a PostgreSQL driver, and the Spring Cloud Eureka Client for service discovery.

    *   **[x] Data Modeling:**
        *   **Description:** Created a `Transaction` entity to represent payment data. This entity was later enhanced to include fields like `airtelTransactionId`, `responseMessage`, `createdAt`, and `updatedAt` to store more comprehensive transaction details.

    *   **[x] Repository Layer:**
        *   **Description:** Implemented a `TransactionRepository` interface using Spring Data JPA. This provides the necessary methods to perform database operations (Create, Read, Update, Delete) on the `Transaction` entity without writing boilerplate code.

    *   **[x] Data Transfer Objects (DTOs):**
        *   **Description:** Created several DTOs (`PaymentRequest`, `PaymentResponse`, `AirtelCallback`) to ensure clean data transfer between the client, the service, and the external Airtel API. This prevents exposing the internal database entities directly.

    *   **[x] Configuration:**
        *   **Description:** Set up configuration for the service. This includes a `WebClientConfig` to create a modern, non-blocking HTTP client for API calls, and an `AirtelConfig` class to manage API credentials, which are stored as placeholders in `application.yml`.

    *   **[x] External API Service (`AirtelService`):**
        *   **Description:** Created a dedicated `AirtelService` to encapsulate all interactions with the external Airtel Money API. A mock implementation was created to simulate getting an authentication token and initiating a payment, allowing for development and testing without real credentials.

    *   **[x] Core Business Logic (`PaymentService`):**
        *   **Description:** Implemented the central `PaymentService` which orchestrates the entire payment process. It handles creating the transaction in the database, calling the `AirtelService`, and processing the asynchronous callback. Basic error handling and a mock security check for the callback were also included.

    *   **[x] API Layer (`PaymentController`):**
        *   **Description:** Exposed the payment functionality through a RESTful `PaymentController`. This includes a `/initiate` endpoint to start a payment and a `/callback` endpoint to receive status updates from Airtel. The controller was designed to handle reactive data streams from the service layer.

    *   **[x] Unit and Integration Testing:**
        *   **Description:** Wrote a suite of tests to ensure the quality and correctness of the service. This includes unit tests for the `AirtelService` and `PaymentService` using Mockito, and integration tests for the `PaymentController` using `WebTestClient`.

    *   **Remaining Tasks:**
        *   [ ] **Complete Airtel Money API Integration:**
            *   **Description:** Replace the mock API calls in `AirtelService` with actual HTTP requests to the Airtel Money API. This requires obtaining real API credentials.
        *   [ ] **Implement Callback Signature Verification:**
            *   **Description:** Implement the logic to cryptographically verify the signature of the incoming callback from Airtel to ensure its authenticity.
        *   [ ] **Implement Asynchronous Communication:**
            *   **Description:** Use a message broker (like RabbitMQ) to notify other services (e.g., `notification-service`) of successful payments, making the system more resilient.
        *   [ ] **Run and Verify Tests:**
            *   **Description:** Resolve issues with the execution environment to run the full test suite and confirm everything is working as expected.

3.  **Implement a `notification-service`:**
    *   Use WebSockets or Push Notifications (e.g., FCM).
    *   Send real-time payment confirmations to the conductor's app.

4.  **Add an API Gateway:**
    *   Use Spring Cloud Gateway.
    *   Create a single entry point for all frontend requests.

5.  **Flesh out Existing Services:**
    *   Add API endpoints for login, registration, fetching user profiles.
    *   Add endpoints for managing routes and fares.

**Frontend Development**

1.  **Build React Native Mobile Apps:**
    *   **Conductor App:**
        *   Login
        *   Destination selection
        *   QR code display
        *   Real-time payment notifications
        *   Transaction history
    *   **Passenger App:**
        *   Login/registration
        *   QR code scanner
        *   Payment flow integration
        *   Transaction history

2.  **Build Next.js Web Application:**
    *   **Bus Company Dashboard:**
        *   Login for bus company owners.
        *   View transactions from their conductors.
        *   Register conductors and buses.
    *   **Gocashless Admin Dashboard:**
        *   Super-admin view of all users and transactions.
# Ready-to-use prompt — Admin Dashboard (Next.js) — Routes, Bus Stops & Fares (CRUD)

Use this prompt to ask an AI or a developer to build the Admin Dashboard front-end (Next.js) that integrates with the existing RFMS backend. It is explicit about UI, API shapes, and behavior so the resulting code/boilerplate is ready for implementation.

---

**Prompt**

You are building the **Admin Dashboard** for the GoCashless bus payment system using **Next.js** (React) for the frontend. The admin must be able to **perform full CRUD operations** on **Routes**, **Bus Stops**, and **Fares**. Use JWT authentication to protect the dashboard. Implement a clean, responsive UI and integrate the frontend with the backend RFMS APIs described below. Follow good UX, validation, and security practices.

**High-level UI flow**

1. Landing: Welcome page with a centered **Get Started** button.
2. Auth: Clicking Get Started → Sign-in / Sign-up page (JWT authentication). After successful sign-in redirect to `/dashboard`.
3. Dashboard shell: main layout with a left **collapsible sidebar** (links: Dashboard, Routes, Bus Stops, Fares, Conductors, Passengers, Transactions, Reports, Settings, Logout) and a top header (search + user menu).
4. Pages required for this step:  
   - **Routes Page** — list, search, create, edit, delete, navigate to bus stops for a route.  
   - **Bus Stops Page** — CRUD and ordering for stops (ability to link stops to a route and set `orderInRoute`).  
   - **Fares Page** — create/edit fares between origin and destination stops (linked to a route), view/lookup fare for a journey.  

**Backend API integration (use these endpoints & request shapes)**  
Integrate with the RFMS API endpoints:

- Routes
  - `GET /api/v1/routes` → list routes
  - `POST /api/v1/routes` → create route — body: `RouteRequest { name: string, description?: string, isActive?: boolean }`
  - `GET /api/v1/routes/{id}` → get single route
  - `PUT /api/v1/routes/{id}` → update route — body: `RouteRequest`
  - `DELETE /api/v1/routes/{id}` → delete route  
- Bus Stops
  - `GET /api/v1/bus-stops` → all stops
  - `POST /api/v1/bus-stops` → create stop — body: `BusStopRequest { name: string, latitude?: number, longitude?: number, routeId?: UUID, orderInRoute?: number }`
  - `GET /api/v1/bus-stops/{id}`
  - `GET /api/v1/bus-stops/by-route/{routeId}` → stops for route (ordered)
  - (update/delete endpoints to be implemented similarly)
- Fares
  - `POST /api/v1/fares` → create fare — body: `FareRequest { routeId: UUID, originStopId: UUID, destinationStopId: UUID, amount: BigDecimal, currency: string, validFrom?: datetime, validTo?: datetime }`
  - `GET /api/v1/fares/{id}`
  - `GET /api/v1/fares/lookup?routeId={}&originStopId={}&destinationStopId={}` → get fare for a journey

**UI details & behavior (exact)**

- **Routes Page**
  - Actions bar: left-aligned **Add New Route** (primary blue + plus icon), right-aligned search input with magnifying-glass icon. Actions bar stacks vertically on small screens.
  - Display each route in a **Route Card** with:
    - `Route Name` (bold)
    - `Description` (subtitle)
    - Action buttons row: **Bus Stops** (navigates to route's bus stops), **Edit**, **Delete** (confirm modal).
  - Clicking **Add New Route** opens a modal or drawer with a `RouteForm` (fields: name*, description, isActive toggle). On submit, POST to `/api/v1/routes` and refresh list.
  - Edit uses PUT `/api/v1/routes/{id}`. Delete shows confirmation; call DELETE `/api/v1/routes/{id}` and remove from UI.
  - Support pagination or infinite scroll for large lists, and client-side filtering by name/description.

- **Bus Stops Page (global + by-route)**
  - If opened from a Route (Bus Stops action): show only stops for that route (GET `/api/v1/bus-stops/by-route/{routeId}`) in `orderInRoute` order.
  - Stop card / table with fields: name, latitude, longitude, orderInRoute, linked route name.
  - Add / Edit modal with validation. Allow updating `orderInRoute` to reorder stops. Provide drag-and-drop ordering (optional) and a Save Order action.

- **Fares Page**
  - Table list of fares (route, origin stop, destination stop, amount, currency, validFrom, validTo).
  - Create/Edit fare modal:
    - Inputs: route (select), origin stop (select filtered by route), destination stop (select filtered by route), amount (numeric), currency (ISO string), validFrom, validTo (datetime).
    - On create: POST `/api/v1/fares`. On update: PUT `/api/v1/fares/{id}` (implement if backend supports it; otherwise delete+create).
  - Provide a **Lookup** flow to query `GET /api/v1/fares/lookup?...` to preview applicable fare for a route/journey.
  - Show most recently valid fare when lookup returns multiple (backend returns the latest valid fare by validFrom).

**Auth & security**
- Use **JWT** for auth. Protect pages on client side and ensure API calls include the JWT. Recommended: store JWT in **httpOnly cookie** (preferred) or secure localStorage if cookie not available. Provide a central `apiClient` that attaches token and handles 401 → redirect to sign-in.
- Enforce role-based UI: only users with `Admin` role see the Routes/Bus Stops/Fares management pages.
- Validate all forms client-side (react-hook-form + zod/yup) and display backend validation errors from API responses.

**Technical stack & libraries (suggested)**
- Next.js (app or pages router — you choose; prefer app router for new projects)
- UI: TailwindCSS + component library (Headless UI or Radix) for accessible modals/drawers
- State & data fetching: React Query (TanStack Query) or SWR for caching & automatic refetching
- Forms: react-hook-form + zod or yup
- HTTP: axios or fetch wrapper (`apiClient`) that centralizes baseURL, auth headers, and error handling
- Charts (for later Dashboard): Recharts or Chart.js
- Icons: Heroicons / lucide-react
- Tests: React Testing Library + Jest for unit tests; Cypress for e2e

**Expected deliverables**
- Folder skeleton (Next.js pages/components/services):
  - `app/` or `pages/`
  - `components/Routes/RouteList.tsx`, `RouteCard.tsx`, `RouteForm.tsx`
  - `components/BusStops/BusStopList.tsx`, `BusStopForm.tsx`
  - `components/Fares/FareList.tsx`, `FareForm.tsx`
  - `lib/apiClient.ts` (axios wrapper)
  - `lib/auth.ts` (login/logout, token handling, protected-route wrapper)
  - `hooks/useRoutes.ts`, `useBusStops.ts`, `useFares.ts` (React Query hooks)
  - `styles/` (Tailwind)
- Implemented integration for all endpoints listed above with sample success/error handling and optimistic UI where appropriate.
- Example request & response JSON samples for create/update operations (see below).
- Accessibility: keyboard focus on modals, aria labels on buttons & inputs.

**Sample JSONs**

- Create Route (POST `/api/v1/routes`)
```json
{
  "name": "Route A - City Center ↔ East Park",
  "description": "Main route from city center to East Park",
  "isActive": true
}
```

- Create Bus Stop (POST `/api/v1/bus-stops`)
```json
{
  "name": "East Park Station",
  "latitude": -15.3875,
  "longitude": 28.3228,
  "routeId": "a2f9c1e4-...-1234",
  "orderInRoute": 3
}
```

- Create Fare (POST `/api/v1/fares`)
```json
{
  "routeId": "a2f9c1e4-...-1234",
  "originStopId": "b3d4e5f6-...-5678",
  "destinationStopId": "c6f7a8b9-...-9012",
  "amount": 20.00,
  "currency": "ZMW",
  "validFrom": "2025-09-01T00:00:00",
  "validTo": null
}
```

**Acceptance criteria (for this step)**
- Admin can create, read, update, delete routes via UI and calls map correctly to `/api/v1/routes`.
- Admin can add, list, edit, reorder and delete bus stops and associate them with a route; UI uses `/api/v1/bus-stops` and `/api/v1/bus-stops/by-route/{routeId}`.
- Admin can create/edit fares and perform a lookup for a journey using `/api/v1/fares/lookup`.
- All forms show validation & server error messages; delete actions require confirmation.

main UI features of the Routes Management web page.
Navigation & Actions Bar(Add New Route Button - Primary blue button with plus icon to create new routes
Search Box - Right-aligned search input with magnifying glass icon for filtering routes
Responsive Layout - Actions bar adapts to mobile screens by stacking vertically)
Route Card Content(Route Name - Large, bold title
Description - Gray subtitle text below the name
Action Buttons Row - Four action buttons at the bottom of each card:
Bus Stops - Navigate to bus stops for this route
Edit - Modify route details
 Delete  - Remove route)

package com.gocashless.rfms.controller;
import com.gocashless.rfms.model.BusStop;
import com.gocashless.rfms.service.BusStopService;
import com.gocashless.rfms.dto.BusStopRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/bus-stops")
public class BusStopController {

    private final BusStopService busStopService;

    @Autowired
    public BusStopController(BusStopService busStopService) {
        this.busStopService = busStopService;
    }

    @PostMapping
    public ResponseEntity<BusStop> createBusStop(@RequestBody BusStopRequest request) {
        try {
            BusStop newBusStop = busStopService.createBusStop(request);
            return new ResponseEntity<>(newBusStop, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping
    public ResponseEntity<List<BusStop>> getAllBusStops() {
        List<BusStop> busStops = busStopService.getAllBusStops();
        return new ResponseEntity<>(busStops, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<BusStop> getBusStopById(@PathVariable UUID id) {
        return busStopService.getBusStopById(id)
                .map(busStop -> new ResponseEntity<>(busStop, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @GetMapping("/by-route/{routeId}")
    public ResponseEntity<List<BusStop>> getBusStopsByRoute(@PathVariable UUID routeId) {
        try {
            List<BusStop> busStops = busStopService.getBusStopsByRoute(routeId);
            return new ResponseEntity<>(busStops, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }
}

package com.gocashless.rfms.controller;

import com.gocashless.rfms.model.Fare;
import com.gocashless.rfms.service.FareService;
import com.gocashless.rfms.dto.FareRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/fares")
public class FareController {

    private final FareService fareService;

    @Autowired
    public FareController(FareService fareService) {
        this.fareService = fareService;
    }

    @PostMapping
    public ResponseEntity<Fare> createFare(@RequestBody FareRequest request) {
        try {
            Fare newFare = fareService.createFare(request);
            return new ResponseEntity<>(newFare, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<Fare> getFareById(@PathVariable UUID id) {
        return fareService.getFareById(id)
                .map(fare -> new ResponseEntity<>(fare, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @GetMapping("/lookup")
    public ResponseEntity<Fare> getFareForJourney(
            @RequestParam UUID routeId,
            @RequestParam UUID originStopId,
            @RequestParam UUID destinationStopId) {
        try {
            Optional<Fare> fare = fareService.getFareForJourney(routeId, originStopId, destinationStopId);
            return fare.map(f -> new ResponseEntity<>(f, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}

package com.gocashless.rfms.controller;

import com.gocashless.rfms.model.Route;
import com.gocashless.rfms.service.RouteService;
import com.gocashless.rfms.dto.RouteRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/routes")
public class RouteController {

    private final RouteService routeService;

    @Autowired
    public RouteController(RouteService routeService) {
        this.routeService = routeService;
    }

    @PostMapping
    public ResponseEntity<Route> createRoute(@RequestBody RouteRequest request) {
        try {
            Route newRoute = routeService.createRoute(request);
            return new ResponseEntity<>(newRoute, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping
    public ResponseEntity<List<Route>> getAllRoutes() {
        List<Route> routes = routeService.getAllRoutes();
        return new ResponseEntity<>(routes, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Route> getRouteById(@PathVariable UUID id) {
        return routeService.getRouteById(id)
                .map(route -> new ResponseEntity<>(route, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Route> updateRoute(@PathVariable UUID id, @RequestBody RouteRequest request) {
        try {
            Route updatedRoute = routeService.updateRoute(id, request);
            return new ResponseEntity<>(updatedRoute, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteRoute(@PathVariable UUID id) {
        routeService.deleteRoute(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}

package com.gocashless.rfms.service;

import com.gocashless.rfms.model.BusStop;
import com.gocashless.rfms.model.Route;
import com.gocashless.rfms.repository.BusStopRepository;
import com.gocashless.rfms.repository.RouteRepository;
import com.gocashless.rfms.dto.BusStopRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class BusStopService {

    private final BusStopRepository busStopRepository;
    private final RouteRepository routeRepository;

    @Autowired
    public BusStopService(BusStopRepository busStopRepository, RouteRepository routeRepository) {
        this.busStopRepository = busStopRepository;
        this.routeRepository = routeRepository;
    }

    public BusStop createBusStop(BusStopRequest request) {
        BusStop busStop = new BusStop();
        busStop.setName(request.getName());
        busStop.setLatitude(request.getLatitude());
        busStop.setLongitude(request.getLongitude());

        if (request.getRouteId() != null) {
            Route route = routeRepository.findById(request.getRouteId())
                    .orElseThrow(() -> new IllegalArgumentException("Route not found with ID: " + request.getRouteId()));
            busStop.setRoute(route);
            busStop.setOrderInRoute(request.getOrderInRoute());
        }

        return busStopRepository.save(busStop);
    }

    public List<BusStop> getAllBusStops() {
        return busStopRepository.findAll();
    }

    public Optional<BusStop> getBusStopById(UUID id) {
        return busStopRepository.findById(id);
    }

    public List<BusStop> getBusStopsByRoute(UUID routeId) {
        Route route = routeRepository.findById(routeId)
                .orElseThrow(() -> new IllegalArgumentException("Route not found with ID: " + routeId));
        return busStopRepository.findByRouteOrderByOrderInRouteAsc(route);
    }

    // Other update and delete methods
}

package com.gocashless.rfms.service;

import com.gocashless.rfms.model.Fare;
import com.gocashless.rfms.model.Route;
import com.gocashless.rfms.model.BusStop;
import com.gocashless.rfms.repository.FareRepository;
import com.gocashless.rfms.repository.RouteRepository;
import com.gocashless.rfms.repository.BusStopRepository;
import com.gocashless.rfms.dto.FareRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
public class FareService {

    private final FareRepository fareRepository;
    private final RouteRepository routeRepository;
    private final BusStopRepository busStopRepository;

    @Autowired
    public FareService(FareRepository fareRepository, RouteRepository routeRepository, BusStopRepository busStopRepository) {
        this.fareRepository = fareRepository;
        this.routeRepository = routeRepository;
        this.busStopRepository = busStopRepository;
    }

    public Fare createFare(FareRequest request) {
        Route route = routeRepository.findById(request.getRouteId())
                .orElseThrow(() -> new IllegalArgumentException("Route not found with ID: " + request.getRouteId()));
        BusStop originStop = busStopRepository.findById(request.getOriginStopId())
                .orElseThrow(() -> new IllegalArgumentException("Origin Stop not found with ID: " + request.getOriginStopId()));
        BusStop destinationStop = busStopRepository.findById(request.getDestinationStopId())
                .orElseThrow(() -> new IllegalArgumentException("Destination Stop not found with ID: " + request.getDestinationStopId()));

        Fare fare = new Fare();
        fare.setRoute(route);
        fare.setOriginStop(originStop);
        fare.setDestinationStop(destinationStop);
        fare.setAmount(request.getAmount());
        fare.setCurrency(request.getCurrency());
        fare.setValidFrom(request.getValidFrom() != null ? request.getValidFrom() : LocalDateTime.now());
        fare.setValidTo(request.getValidTo());

        return fareRepository.save(fare);
    }

    public Optional<Fare> getFareById(UUID id) {
        return fareRepository.findById(id);
    }

    public Optional<Fare> getFareForJourney(UUID routeId, UUID originStopId, UUID destinationStopId) {
        Route route = routeRepository.findById(routeId)
                .orElseThrow(() -> new IllegalArgumentException("Route not found with ID: " + routeId));
        BusStop originStop = busStopRepository.findById(originStopId)
                .orElseThrow(() -> new IllegalArgumentException("Origin Stop not found with ID: " + originStopId));
        BusStop destinationStop = busStopRepository.findById(destinationStopId)
                .orElseThrow(() -> new IllegalArgumentException("Destination Stop not found with ID: " + destinationStopId));

        // This method finds the most recently valid fare
        return fareRepository.findFirstByRouteAndOriginStopAndDestinationStopOrderByValidFromDesc(
                route, originStop, destinationStop
        );
    }

    // Other update and delete methods
}
package com.gocashless.rfms.service;

import com.gocashless.rfms.model.Route;
import com.gocashless.rfms.repository.RouteRepository;
import com.gocashless.rfms.dto.RouteRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class RouteService {

    private final RouteRepository routeRepository;

    @Autowired
    public RouteService(RouteRepository routeRepository) {
        this.routeRepository = routeRepository;
    }

    public Route createRoute(RouteRequest request) {
        if (routeRepository.existsByName(request.getName())) {
            throw new IllegalArgumentException("Route with this name already exists.");
        }
        Route route = new Route();
        route.setName(request.getName());
        route.setDescription(request.getDescription());
        route.setIsActive(request.getIsActive() != null ? request.getIsActive() : true);
        return routeRepository.save(route);
    }

    public List<Route> getAllRoutes() {
        return routeRepository.findAll();
    }

    public Optional<Route> getRouteById(UUID id) {
        return routeRepository.findById(id);
    }

    public Route updateRoute(UUID id, RouteRequest request) {
        return routeRepository.findById(id).map(route -> {
            route.setName(request.getName());
            route.setDescription(request.getDescription());
            route.setIsActive(request.getIsActive());
            return routeRepository.save(route);
        }).orElseThrow(() -> new IllegalArgumentException("Route not found with ID: " + id));
    }

    public void deleteRoute(UUID id) {
        routeRepository.deleteById(id);
    }
}

package com.gocashless.rfms.dto;

import lombok.Data;
import java.util.UUID;

@Data
public class BusStopRequest {
    private String name;
    private Double latitude;
    private Double longitude;
    private UUID routeId; // Optional, if a stop belongs to a specific route
    private Integer orderInRoute; // Optional, for ordering stops on a route
}

package com.gocashless.rfms.dto;

import lombok.Data;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

@Data
public class FareRequest {
    private UUID routeId;
    private UUID originStopId;
    private UUID destinationStopId;
    private BigDecimal amount;
    private String currency;
    private LocalDateTime validFrom;
    private LocalDateTime validTo;
}

package com.gocashless.rfms.dto;

import lombok.Data;

@Data
public class RouteRequest {
    private String name;
    private String description;
    private Boolean isActive;
}

